@import 'variables';

$breakpoints: (
        xxs: 320px,
        xs: 620px,
        sm: 820px,
        md: 920px,
        lg: 1220px,
        xl: 1440px,
        xxl: 1920px
);

$maxWidth: 1920;
$minWidth: 320;

@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if map-has-key($breakpoints, $lower) == false {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if map-has-key($breakpoints, $upper) == false {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@mixin range {
  height: 6px;
  appearance: none;
  padding: 0;
  cursor: pointer;

  @include respond-below(sm) {
    width: 100%;
  }

  &::-webkit-slider-runnable-track, {
    height: 6px;
    border: $border-white;
    background: $color-white;
    color: $color-white;
    border-radius: 6px/100%;
  }

  &::-webkit-slider-thumb {
    background: $color-blue;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    margin-top: -6px;
  }

  &::-moz-range-thumb {
    cursor: pointer;
    width: 20px;
    height: 20px;
    background: $color-blue;
    border: none;
    border-radius: 50%;
  }

  &::-moz-range-track {
    background: $color-white;
    border-radius: 6px/100%;
    border: $border-white;
  }

  input[type="range"]::-ms-thumb {
    background-color: $color-blue;
    border: none;
    width: 26px;
    height: 26px;
    border-radius: 6px/100%;
    color: $color-blue;
  }
}

@mixin blue($color) {
  &_blue {
    font-weight: 400;
    color: $color;
  }
}

@mixin align-block($position) {
  display: flex;
  justify-content: #{$position};
  width: 100%;

  .container {
    width: 90%;

    @include respond-above(lg) {
      width: 1170px;
    }
  }
}

@mixin hover($element) {
  &:hover {
    @if ($element == 'primary') {
      background-color: $color-blue-dark;
    }

    @if ($element == 'default') {
      background-color: $color-gray-lighter;
      color: $color-white;
      border-color: $color-white;
    }

    @if ($element == 'link') {
      color: $color-gray-lighter;
    }
  }
}

@mixin schema {
  @include respond-above(lg) {
    $width: calc(100% / 2 - 5px);

    &:not(:last-child)::after {
      position: absolute;
      height: 6px;
      width: #{$width};
      top: 60px;
      left: calc(100% - 55px);
      background: url("../../icons/ellipses.svg") top/cover no-repeat;
      display: inline-block;
      content: '';
    }
  }
}

@mixin icon($block, $icon-name) {
  .#{$block}__#{$icon-name} {
    display: flex;
    align-items: center;

    &::before {
      @include adaptive('margin-right', 10, 5, 0);
      display: inline-block;
      height: 20px;
      width: 20px;
      background: url("../icons/#{$icon-name}.svg") no-repeat;
      content: "";
    }

    @include hover('link');
    @include respond-below(md) {
      margin-bottom: 5px;
    }
  }
}

@mixin set-bg($bg-image) {
  &::before {
    position: absolute;
    display: block;
    content: '';
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url("../images/#{$bg-image}.png") top/cover no-repeat;
    z-index: -1;
  }
}

@mixin button ($background, $color, $border, $border-radius) {
  background-color: #{$background};
  color: #{$color};
  border: #{$border};
  border-radius: #{$border-radius}px;
}

@mixin adaptive($property, $startValue, $endValue, $mode) {
  $addValue: $startValue - $endValue;

  @if ($mode == 0) {
    #{$property}: $startValue + px;

    @media (max-width: #{$maxWidth + px}) {
      #{$property}: calc(#{$endValue + px} + #{$addValue} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth}));
    }
  }

  @if ($mode == 1) {
    #{$property}-top: $startValue + px;
    #{$property}-bottom: $startValue + px;

    @media (max-width: #{$maxWidth + px}) {
      #{$property}-top: calc(#{$endValue + px} + #{$addValue} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth}));
      #{$property}-bottom: calc(#{$endValue + px} + #{$addValue} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth}));
    }
  }

  @if ($mode == 2) {
    #{$property}-left: $startValue + px;
    #{$property}-right: $startValue + px;

    @media (max-width: #{$maxWidth + px}) {
      #{$property}-left: calc(#{$endValue + px} + #{$addValue} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth}));
      #{$property}-right: calc(#{$endValue + px} + #{$addValue} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth}));
    }
  }
}

@mixin arrow($icon-name) {
  &::after {
    position: absolute;
    top: 12px;
    right: 10px;
    display: inline-block;

    content: url("../images/#{$icon-name}.svg");
    width: 21px;
    height: 21px;
  }
}




